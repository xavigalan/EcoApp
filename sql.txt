-- Eliminar el esquema anterior si existe
DROP SCHEMA IF EXISTS `ecoapp`;

-- Crear el esquema nuevo
CREATE SCHEMA IF NOT EXISTS `ecoapp` DEFAULT CHARACTER SET utf8;
USE `ecoapp`;

-- --------------------------------------------------------
-- CREACIÓN DE TABLAS
-- Crear la tabla de Roles
CREATE TABLE IF NOT EXISTS `roles` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(50) NOT NULL,
    `description` TEXT
) ENGINE = InnoDB;

-- Crear la tabla de Usuarios
CREATE TABLE IF NOT EXISTS `users` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `first_name` VARCHAR(100),
    `last_name` VARCHAR(200),
    `dni` VARCHAR(9),
    `phone` VARCHAR(15),
    `email` VARCHAR(255) NOT NULL UNIQUE,
    `password` VARCHAR(255) NOT NULL,
    `role_id` INT,
    `creation_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`role_id`) REFERENCES `roles`(`id`)
) ENGINE = InnoDB;

-- Crear la tabla de Tipos de Servicios
CREATE TABLE IF NOT EXISTS `service_types` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `type` VARCHAR(50) NOT NULL,
    `description` VARCHAR(255)
) ENGINE = InnoDB;

-- Crear la tabla de Estados de Servicio
CREATE TABLE IF NOT EXISTS `service_status` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `status` VARCHAR(50) NOT NULL
) ENGINE = InnoDB;

-- Crear la tabla de Solicitudes de Servicio (con manager_id directamente en la tabla)
CREATE TABLE IF NOT EXISTS `service_requests` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `client_id` INT NOT NULL,  
    `service_type_id` INT NOT NULL,  
    `location_latitude` DECIMAL(10, 8),  
    `location_longitude` DECIMAL(11, 8),  
    `location_address` VARCHAR(255),  
    `description` TEXT,              
    `status_id` INT NOT NULL DEFAULT 1, 
    `creation_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`client_id`) REFERENCES `users`(`id`),
    FOREIGN KEY (`service_type_id`) REFERENCES `service_types`(`id`),
    FOREIGN KEY (`status_id`) REFERENCES `service_status`(`id`)
) ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `service_request_managers` (
    `service_request_id` INT NOT NULL, 
    `manager_id` INT NOT NULL,
    PRIMARY KEY (`service_request_id`, `manager_id`),
    FOREIGN KEY (`service_request_id`) REFERENCES `service_requests`(`id`),
    FOREIGN KEY (`manager_id`) REFERENCES `users`(`id`)
) ENGINE = InnoDB;


CREATE TABLE IF NOT EXISTS `services` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `service_request_id` INT NOT NULL, 
    `employee_id` INT NOT NULL,
    `status_id` INT NOT NULL DEFAULT 2, -- Estado inicial (2: accepted)
    `start_date` DATETIME,              
    `end_date` DATETIME,                
    `remarks` TEXT,
    `photo_before` LONGBLOB NULL, -- Foto antes de realizar el servicio
    `photo_after` LONGBLOB NULL,  -- Foto después de realizar el servicio
    FOREIGN KEY (`service_request_id`) REFERENCES `service_requests`(`id`),
    FOREIGN KEY (`employee_id`) REFERENCES `users`(`id`),
    FOREIGN KEY (`status_id`) REFERENCES `service_status`(`id`)
) ENGINE = InnoDB;


-- Crear la tabla de Historial de Servicios (con el usuario que hizo el cambio)
CREATE TABLE IF NOT EXISTS `service_logs` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `service_id` INT NOT NULL,
    `status_id` INT NOT NULL,  
    `user_id` INT NOT NULL,  -- Usuario que cambió el estado
    `date` DATETIME NOT NULL,
    FOREIGN KEY (`service_id`) REFERENCES `services`(`id`),
    FOREIGN KEY (`status_id`) REFERENCES `service_status`(`id`),
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`)  -- Relación con el usuario que hizo el cambio
) ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `service_employees` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `service_id` INT NOT NULL,      -- Relación con `services`
    `employee_id` INT NOT NULL,    -- Relación con `users`
    FOREIGN KEY (`service_id`) REFERENCES `services`(`id`),
    FOREIGN KEY (`employee_id`) REFERENCES `users`(`id`)
) ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `service_managers` (
    `service_id` INT NOT NULL,        -- Relación con el `service`
    `manager_id` INT NOT NULL,        -- Relación con el `manager`
    PRIMARY KEY (`service_id`, `manager_id`),
    FOREIGN KEY (`service_id`) REFERENCES `services`(`id`),
    FOREIGN KEY (`manager_id`) REFERENCES `users`(`id`)
) ENGINE = InnoDB;


-- Crear la tabla de Tipos de Puntos (Type Points)
CREATE TABLE IF NOT EXISTS `type_points` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `type` VARCHAR(50) NOT NULL  -- Por ejemplo, 'container', 'landfill', etc.
) ENGINE = InnoDB;

-- Crear la tabla de Puntos en el Mapa
CREATE TABLE IF NOT EXISTS `map_points` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(100) NOT NULL,
    `type_id` INT NOT NULL,  -- Relacionado con la tabla type_points
    `description` TEXT,
    `latitude` DECIMAL(10, 8) NOT NULL,  -- Latitud con precisión de 8 decimales
    `longitude` DECIMAL(11, 8) NOT NULL,  -- Longitud con precisión de 8 decimales
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`type_id`) REFERENCES `type_points`(`id`)  -- Relación con la tabla de tipos
) ENGINE = InnoDB;


-- Insertar Roles
INSERT INTO `roles` (name, description) VALUES
('Waste Collector', 'Role for users who collect waste'),
('Gardener', 'Role for users who perform gardening tasks'),
('Customer', 'Role for users who are customers consuming services or products'),
('Manager', 'Role for users who are managers with administrative permissions');

-- Insertar Status de Servicios
INSERT INTO `service_status` (`status`) VALUES 
('pending'), ('accepted'), ('in progress'), ('completed');

-- Insertar Usuarios
INSERT INTO `users` (`first_name`, `last_name`, `dni`, `phone`, `email`, `password`, `role_id`) 
VALUES 
('Juan', 'Pérez Gómez', '12345678A', '612345678', 'juan.perez@email.com', 'password123', 
(SELECT `id` FROM `roles` WHERE `name` = 'Waste Collector')),

('Laura', 'González Pérez', '56789012E', '656789012', 'laura.gonzalez@email.com', 'password202', 
(SELECT `id` FROM `roles` WHERE `name` = 'Customer')),

('Pedro', 'Martínez Sánchez', '67890123F', '667890123', 'pedro.martinez@email.com', 'password303', 
(SELECT `id` FROM `roles` WHERE `name` = 'Customer')),

('Carlos', 'García Sánchez', '34567890C', '634567890', 'carlos.garcia@email.com', 'password789', 
(SELECT `id` FROM `roles` WHERE `name` = 'Manager')),

('Ana', 'Ramírez López', '23456789B', '612345678', 'ana.ramirez@email.com', 'password456', 
(SELECT `id` FROM `roles` WHERE `name` = 'Employee'));

-- Insertar Tipos de Servicios
INSERT INTO `service_types` (`type`, `description`) VALUES
('Pruning', 'Services related to tree or plant pruning'),
('Furniture', 'Services related to furniture, such as assembly or repair'),
('Events', 'Services related to event organization'),
('Others', 'Any other type of service not classified previously');

-- Insertar Tipos de Puntos
INSERT INTO `type_points` (`type`) VALUES
('Container'),
('Textile container'),
('Waste center'),
('Others');

-- Insertar Puntos en el Mapa
INSERT INTO `map_points` (`name`, `type_id`, `description`, `latitude`, `longitude`) 
VALUES 
('Recycling Center A', 1, 'Central recycling station for the city', 40.712776, -74.005974),
('Green Waste Depot', 2, 'For green waste disposal', 40.689247, -74.044502);

-- Insertar Solicitudes de Servicio (Cliente hace la solicitud)
INSERT INTO `service_requests` (`client_id`, `service_type_id`, `location_latitude`, `location_longitude`, `location_address`, `description`, `status_id`) 
VALUES
(2, 1, 40.712776, -74.005974, 'Main Street 123', 'Prune the tree in front of my house', 1);

-- Insertar la relación de Managers y Solicitudes
INSERT INTO `service_request_managers` (`service_request_id`, `manager_id`)
VALUES 
(1, 4);

-- Insertar Servicios (Asignando al Empleado para ejecutar el servicio)
INSERT INTO `services` (`service_request_id`, `employee_id`, `status_id`, `start_date`, `end_date`) 
VALUES
(1, 5, 2, NOW(), DATE_ADD(NOW(), INTERVAL 2 HOUR));

-- Insertar Logs de Servicios (Solo Manager y Employee pueden cambiar el estado)
-- Empleado cambia el estado del servicio a 'in progress'
INSERT INTO `service_logs` (`service_id`, `status_id`, `user_id`, `date`) 
VALUES 
(1, 3, 5, NOW());

-- Manager cambia el estado del servicio a 'completed'
INSERT INTO `service_logs` (`service_id`, `status_id`, `user_id`, `date`) 
VALUES 
(1, 4, 4, NOW());
